definitions:
  imagegen.ProviderType:
    enum:
    - openai
    type: string
    x-enum-varnames:
    - OpenAI
  model.AvailableLLMProvidersResponse:
    description: Response to getting availible LLM Providers
    properties:
      providers:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
    type: object
  model.CreateRequest:
    description: Parameters for flyer background generation
    properties:
      color_palette:
        description: |-
          Color palette to use for the background
          Example: "metalic gray and emerald green"
        type: string
      image_model_provider:
        allOf:
        - $ref: '#/definitions/imagegen.ProviderType'
        description: |-
          Image generation model provider (e.g. "openai")
          Required: true
          Example: "openai"
      text_model_provider:
        allOf:
        - $ref: '#/definitions/textgen.ProviderType'
        description: |-
          Text generation model provider (e.g. "openai", "anthropic", "google-vertex")
          Required: true
          Example: "openai"
    required:
    - image_model_provider
    - text_model_provider
    type: object
  model.CreateResponse:
    description: Response containing paths to generated backgrounds
    properties:
      background_paths:
        description: |-
          Array of file paths to the generated background images
          Example: ["/images/1234567890/image.png"]
        items:
          type: string
        type: array
    type: object
  model.GenerationErrorResponse:
    description: Error response from the API
    properties:
      error:
        type: string
    type: object
  model.LLMProviderErrorResponse:
    description: Error response from the API
    properties:
      error:
        type: string
    type: object
  model.LLMProviders:
    description: List of all providers for a LLM type (text/image)
    properties:
      providers:
        items:
          type: string
        type: array
    type: object
  model.LoginRequest:
    description: Login request payload
    properties:
      password:
        description: |-
          Password hash
          Example: "$2a$10$..."
        type: string
      username:
        description: |-
          Username for authentication
          Example: "john_doe"
        type: string
    required:
    - password
    - username
    type: object
  model.LoginResponse:
    description: Login response
    properties:
      id:
        description: |-
          User's unique identifier
          Example: "123e4567-e89b-12d3-a456-426614174000"
        type: string
      token:
        description: |-
          JWT token for authentication
          Example: "eyJhbGciOiJIUzI1NiIs..."
        type: string
    type: object
  model.RegisterRequest:
    description: Registration request payload
    properties:
      email:
        description: |-
          Email address
          Example: "john@example.com"
        type: string
      password:
        description: |-
          Password hash
          Example: "$2a$10$..."
        minLength: 8
        type: string
      username:
        description: |-
          Desired username
          Example: "john_doe"
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  model.RegisterResponse:
    description: Registration request payload
    properties:
      token:
        description: Token for all endpoints required auth
        type: string
      user:
        allOf:
        - $ref: '#/definitions/model.UserRegistrationInfo'
        description: Basic Info regarding User
    type: object
  model.UpdateLLMProviderAPIKeysRequest:
    description: Request to add/update API keys
    properties:
      image_providers:
        additionalProperties:
          type: string
        description: |-
          Image generation service provider
          Example: {"openai": "sk-493..."}
        type: object
      text_providers:
        additionalProperties:
          type: string
        description: |-
          Text generation service provider
          Example: {"anthropic": "sk-493..."}
        type: object
    required:
    - image_providers
    - text_providers
    type: object
  model.UpdateUserResponse:
    description: Response for updating user, such as deleting a user
    properties:
      message:
        description: Message regarding successful operation
        type: string
    type: object
  model.UserErrorResponse:
    description: Error response from the API
    properties:
      error:
        type: string
    type: object
  model.UserRegistrationInfo:
    description: Basic Info regarding User
    properties:
      email:
        description: |-
          Email address
          Example: "john@example.com"
        type: string
      id:
        description: |-
          user's UUID
          Example: "john_doe"
        type: string
      username:
        description: |-
          Desired username
          Example: "john_doe"
        type: string
    type: object
  model.UserResponse:
    description: Response for getting user, everything but password and api keys
    properties:
      active_status:
        description: |-
          Whether the account is active
          Example: true
        type: boolean
      created_at:
        description: |-
          Account creation timestamp
          Example: "2024-01-04T12:00:00Z"
        type: string
      email:
        description: |-
          User's email address
          Example: "john@example.com"
        type: string
      id:
        description: |-
          Unique identifier for the user
          Example: "123e4567-e89b-12d3-a456-426614174000"
        type: string
      is_admin:
        description: |-
          Whether the user has admin privileges
          Example: false
        type: boolean
      last_login:
        description: |-
          Last login timestamp
          Example: "2024-01-04T12:00:00Z"
        type: string
      updated_at:
        description: |-
          Last update timestamp
          Example: "2024-01-04T12:00:00Z"
        type: string
      username:
        description: |-
          Username for login
          Example: "john_doe"
        type: string
    type: object
  textgen.ProviderType:
    enum:
    - openai
    - anthropic
    - google-vertex
    type: string
    x-enum-varnames:
    - OpenAI
    - Anthropic
    - GoogleVertex
info:
  contact: {}
paths:
  /api/v1/flyer/{id}:
    post:
      consumes:
      - application/json
      description: Generates new flyer background images using AI with specified color
        palette
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Generation parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.CreateRequest'
      produces:
      - application/json
      responses:
        "202":
          description: Successfully queued generation
          schema:
            $ref: '#/definitions/model.CreateResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/model.GenerationErrorResponse'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/model.GenerationErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/model.GenerationErrorResponse'
      security:
      - BearerAuth: []
      summary: Generate new flyer backgrounds
      tags:
      - flyer
  /api/v1/flyer/{id}/{path}:
    get:
      consumes:
      - application/json
      description: Retrieves a previously generated flyer background image by file
        path
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Image path
        in: path
        name: path
        required: true
        type: string
      produces:
      - image/png
      responses:
        "200":
          description: Image data
          schema:
            type: file
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/model.GenerationErrorResponse'
        "404":
          description: Image not found
          schema:
            $ref: '#/definitions/model.GenerationErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/model.GenerationErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a generated flyer background
      tags:
      - flyer
  /api/v1/provider/{id}/{model_type}:
    get:
      consumes:
      - application/json
      description: Retrieves all supported LLM providers for either image or text
        generation models
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Type of LLM provider (either 'text' or 'image')
        in: path
        name: model_type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of available providers
          schema:
            $ref: '#/definitions/model.LLMProviders'
        "400":
          description: If the model type is not image or text
          schema:
            $ref: '#/definitions/model.LLMProviderErrorResponse'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/model.LLMProviderErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/model.LLMProviderErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all the available providers for a LLM type (text/image)
      tags:
      - provider
  /api/v1/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user account
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User deleted
          schema:
            $ref: '#/definitions/model.UpdateUserResponse'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/model.UserErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/model.UserErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/model.UserErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get detailed information about a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User details
          schema:
            $ref: '#/definitions/model.UserResponse'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/model.UserErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/model.UserErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/model.UserErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user details by ID
      tags:
      - users
  /api/v1/users/{id}/api-keys:
    get:
      consumes:
      - application/json
      description: Retrieve a list of available text and image llm providers
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Retrieved list of available LLM models
          schema:
            $ref: '#/definitions/model.AvailableLLMProvidersResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/model.UserErrorResponse'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/model.UserErrorResponse'
      security:
      - BearerAuth: []
      summary: Get the available LLM Providers for the user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user's API keys for text and image generation services
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: API keys
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.UpdateLLMProviderAPIKeysRequest'
      produces:
      - application/json
      responses:
        "200":
          description: API keys updated
          schema:
            $ref: '#/definitions/model.UpdateUserResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/model.UserErrorResponse'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/model.UserErrorResponse'
      security:
      - BearerAuth: []
      summary: Add/update LLM Providers API keys (idempotent)
      tags:
      - users
  /api/v1/users/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged in
          schema:
            $ref: '#/definitions/model.LoginResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/model.UserErrorResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/model.UserErrorResponse'
      summary: Login user
      tags:
      - users
  /api/v1/users/register:
    post:
      consumes:
      - application/json
      description: Register a new user with username, password and email
      parameters:
      - description: User registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully registered
          schema:
            $ref: '#/definitions/model.RegisterResponse'
        "400":
          description: Invalid request body or username taken
          schema:
            $ref: '#/definitions/model.UserErrorResponse'
      summary: Register new user
      tags:
      - users
swagger: "2.0"
